/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root.tsx'
import { Route as LayoutImport } from './routes/_layout.tsx'
import { Route as LayoutIndexImport } from './routes/_layout/index.tsx'
import { Route as LayoutRentMinerImport } from './routes/_layout/rent-miner.tsx'
import { Route as LayoutInviteImport } from './routes/_layout/invite.tsx'
import { Route as LayoutDailyCheckInImport } from './routes/_layout/daily-check-in.tsx'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRentMinerRoute = LayoutRentMinerImport.update({
  id: '/rent-miner',
  path: '/rent-miner',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutInviteRoute = LayoutInviteImport.update({
  id: '/invite',
  path: '/invite',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDailyCheckInRoute = LayoutDailyCheckInImport.update({
  id: '/daily-check-in',
  path: '/daily-check-in',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/daily-check-in': {
      id: '/_layout/daily-check-in'
      path: '/daily-check-in'
      fullPath: '/daily-check-in'
      preLoaderRoute: typeof LayoutDailyCheckInImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/invite': {
      id: '/_layout/invite'
      path: '/invite'
      fullPath: '/invite'
      preLoaderRoute: typeof LayoutInviteImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/rent-miner': {
      id: '/_layout/rent-miner'
      path: '/rent-miner'
      fullPath: '/rent-miner'
      preLoaderRoute: typeof LayoutRentMinerImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutDailyCheckInRoute: typeof LayoutDailyCheckInRoute
  LayoutInviteRoute: typeof LayoutInviteRoute
  LayoutRentMinerRoute: typeof LayoutRentMinerRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDailyCheckInRoute: LayoutDailyCheckInRoute,
  LayoutInviteRoute: LayoutInviteRoute,
  LayoutRentMinerRoute: LayoutRentMinerRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/daily-check-in': typeof LayoutDailyCheckInRoute
  '/invite': typeof LayoutInviteRoute
  '/rent-miner': typeof LayoutRentMinerRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/daily-check-in': typeof LayoutDailyCheckInRoute
  '/invite': typeof LayoutInviteRoute
  '/rent-miner': typeof LayoutRentMinerRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/daily-check-in': typeof LayoutDailyCheckInRoute
  '/_layout/invite': typeof LayoutInviteRoute
  '/_layout/rent-miner': typeof LayoutRentMinerRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/daily-check-in' | '/invite' | '/rent-miner' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/daily-check-in' | '/invite' | '/rent-miner' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/daily-check-in'
    | '/_layout/invite'
    | '/_layout/rent-miner'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/daily-check-in",
        "/_layout/invite",
        "/_layout/rent-miner",
        "/_layout/"
      ]
    },
    "/_layout/daily-check-in": {
      "filePath": "_layout/daily-check-in.tsx",
      "parent": "/_layout"
    },
    "/_layout/invite": {
      "filePath": "_layout/invite.tsx",
      "parent": "/_layout"
    },
    "/_layout/rent-miner": {
      "filePath": "_layout/rent-miner.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
